package Array.Middle;

//Offer：
//    给定一个包含 n 个整数的数组nums
//Target：
//    判断nums中是否存在三个元素 a，b，c ,使得a + b + c = 0
//    找出所有满足条件且不重复的三元组
//    答案中不可以包含重复的三元组
public class ThreeSum {
//    思路：
//    要找出三个数且和为0，除了三个数全是0的情况之外，肯定会有负数和正数
//    要先 fix 一个数，然后去找另外两个数，找到两个数且和为第一个 fix 数的相反数就行了
//    但不能使用2Sum那种HashMap的解法，会有重复结果出现，就算使用 TreeSet 来去除重复也不行，会 TLE（Time Limit Exceeded）
//    既然另外两个数不能使用HashMap来找，如何能更有效的定位呢
//      肯定不希望遍历所有两个数的组合
//    如果数组是有序的
//      就可以用双指针
//      以线性时间复杂度来遍历所有满足题意的两个数组合

}
